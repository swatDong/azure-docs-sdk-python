#YamlMime:PythonReference
api_name: []
items:
- _type: class
  children:
  - azure.servicebus.servicebusservice.ServiceBusService.create_event_hub
  - azure.servicebus.servicebusservice.ServiceBusService.create_queue
  - azure.servicebus.servicebusservice.ServiceBusService.create_rule
  - azure.servicebus.servicebusservice.ServiceBusService.create_subscription
  - azure.servicebus.servicebusservice.ServiceBusService.create_topic
  - azure.servicebus.servicebusservice.ServiceBusService.delete_event_hub
  - azure.servicebus.servicebusservice.ServiceBusService.delete_queue
  - azure.servicebus.servicebusservice.ServiceBusService.delete_queue_message
  - azure.servicebus.servicebusservice.ServiceBusService.delete_rule
  - azure.servicebus.servicebusservice.ServiceBusService.delete_subscription
  - azure.servicebus.servicebusservice.ServiceBusService.delete_subscription_message
  - azure.servicebus.servicebusservice.ServiceBusService.delete_topic
  - azure.servicebus.servicebusservice.ServiceBusService.format_dead_letter_queue_name
  - azure.servicebus.servicebusservice.ServiceBusService.format_dead_letter_subscription_name
  - azure.servicebus.servicebusservice.ServiceBusService.get_event_hub
  - azure.servicebus.servicebusservice.ServiceBusService.get_queue
  - azure.servicebus.servicebusservice.ServiceBusService.get_rule
  - azure.servicebus.servicebusservice.ServiceBusService.get_subscription
  - azure.servicebus.servicebusservice.ServiceBusService.get_topic
  - azure.servicebus.servicebusservice.ServiceBusService.list_queues
  - azure.servicebus.servicebusservice.ServiceBusService.list_rules
  - azure.servicebus.servicebusservice.ServiceBusService.list_subscriptions
  - azure.servicebus.servicebusservice.ServiceBusService.list_topics
  - azure.servicebus.servicebusservice.ServiceBusService.peek_lock_queue_message
  - azure.servicebus.servicebusservice.ServiceBusService.peek_lock_subscription_message
  - azure.servicebus.servicebusservice.ServiceBusService.read_delete_queue_message
  - azure.servicebus.servicebusservice.ServiceBusService.read_delete_subscription_message
  - azure.servicebus.servicebusservice.ServiceBusService.receive_queue_message
  - azure.servicebus.servicebusservice.ServiceBusService.receive_subscription_message
  - azure.servicebus.servicebusservice.ServiceBusService.renew_lock_queue_message
  - azure.servicebus.servicebusservice.ServiceBusService.renew_lock_subscription_message
  - azure.servicebus.servicebusservice.ServiceBusService.send_event
  - azure.servicebus.servicebusservice.ServiceBusService.send_queue_message
  - azure.servicebus.servicebusservice.ServiceBusService.send_queue_message_batch
  - azure.servicebus.servicebusservice.ServiceBusService.send_topic_message
  - azure.servicebus.servicebusservice.ServiceBusService.send_topic_message_batch
  - azure.servicebus.servicebusservice.ServiceBusService.set_proxy
  - azure.servicebus.servicebusservice.ServiceBusService.unlock_queue_message
  - azure.servicebus.servicebusservice.ServiceBusService.unlock_subscription_message
  - azure.servicebus.servicebusservice.ServiceBusService.update_event_hub
  - azure.servicebus.servicebusservice.ServiceBusService.with_filter
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: ServiceBusService
  source:
    id: ServiceBusService
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 78
  summary: 'Bases: `object`












































    '
  syntax:
    content: ServiceBusService(self, service_namespace=None, account_key=None, issuer=None,
      x_ms_version="2011-06-01", host_base=".servicebus.windows.net", shared_access_key_name=None,
      shared_access_key_value=None, authentication=None, timeout=65, request_session=None)
  type: Class
  uid: azure.servicebus.servicebusservice.ServiceBusService
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.create_event_hub
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: create_event_hub
  source:
    id: create_event_hub
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 1097
  summary: "Creates a new Event Hub.\nhub_name:\n   Name of event hub.\n\nhub:\n \
    \  Optional. Event hub properties. Instance of EventHub class.\n\nhub.message_retention_in_days:\n\
    \   Number of days to retain the events for this Event Hub.\n<SYSTEM MESSAGE:\
    \ c:\\python35\\lib\\site-packages\\azure_servicebus-0.21.1-py3.5.egg\\azure\\\
    servicebus\\servicebusservice.py:docstring of azure.servicebus.servicebusservice.ServiceBusService.create_event_hub:9:\
    \ (WARNING/2) Definition list ends without a blank line; unexpected unindent.>\n\
    hub.status: Status of the Event Hub (enabled or disabled). hub.user_metadata:\
    \ User metadata. hub.partition_count: Number of shards on the Event Hub. fail_on_exist:\n\
    <SYSTEM MESSAGE: c:\\python35\\lib\\site-packages\\azure_servicebus-0.21.1-py3.5.egg\\\
    azure\\servicebus\\servicebusservice.py:docstring of azure.servicebus.servicebusservice.ServiceBusService.create_event_hub:13:\
    \ (ERROR/3) Unexpected indentation.>\nSpecify whether to throw an exception when\
    \ the event hub exists."
  syntax:
    content: create_event_hub(self, hub_name, hub=None, fail_on_exist=False)
    parameters:
    - defaultValue: None
      id: self
    - id: hub_name
    - id: hub
    - defaultValue: 'False'
      id: fail_on_exist
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.create_event_hub
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.create_queue
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: create_queue
  source:
    id: create_queue
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 230
  summary: "Creates a new queue. Once created, this queue's resource manifest is immutable.\n\
    queue_name:\n   Name of the queue to create.\n\nqueue:\n   Queue object to create.\n\
    \nfail_on_exist:\n   Specify whether to throw an exception when the queue exists."
  syntax:
    content: create_queue(self, queue_name, queue=None, fail_on_exist=False)
    parameters:
    - defaultValue: None
      id: self
    - id: queue_name
    - id: queue
    - defaultValue: 'False'
      id: fail_on_exist
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.create_queue
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.create_rule
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: create_rule
  source:
    id: create_rule
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 414
  summary: "Creates a new rule. Once created, this rule's resource manifest is immutable.\n\
    topic_name:\n   Name of the topic.\n\nsubscription_name:\n   Name of the subscription.\n\
    \nrule_name:\n   Name of the rule.\n\nfail_on_exist:\n   Specify whether to throw\
    \ an exception when the rule exists."
  syntax:
    content: create_rule(self, topic_name, subscription_name, rule_name, rule=None,
      fail_on_exist=False)
    parameters:
    - id: self
    - defaultValue: 'False'
      id: topic_name
    - defaultValue: None
      id: subscription_name
    - id: rule_name
    - id: rule
    - id: fail_on_exist
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.create_rule
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.create_subscription
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: create_subscription
  source:
    id: create_subscription
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 539
  summary: "Creates a new subscription. Once created, this subscription resource manifest\
    \ is immutable.\ntopic_name:\n   Name of the topic.\n\nsubscription_name:\n  \
    \ Name of the subscription.\n\nfail_on_exist:\n   Specify whether throw exception\
    \ when subscription exists."
  syntax:
    content: create_subscription(self, topic_name, subscription_name, subscription=None,
      fail_on_exist=False)
    parameters:
    - defaultValue: 'False'
      id: self
    - defaultValue: None
      id: topic_name
    - id: subscription_name
    - id: subscription
    - id: fail_on_exist
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.create_subscription
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.create_topic
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: create_topic
  source:
    id: create_topic
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 322
  summary: "Creates a new topic. Once created, this topic resource manifest is immutable.\n\
    topic_name:\n   Name of the topic to create.\n\ntopic:\n   Topic object to create.\n\
    \nfail_on_exist:\n   Specify whether to throw an exception when the topic exists."
  syntax:
    content: create_topic(self, topic_name, topic=None, fail_on_exist=False)
    parameters:
    - defaultValue: None
      id: self
    - id: topic_name
    - id: topic
    - defaultValue: 'False'
      id: fail_on_exist
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.create_topic
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_event_hub
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: delete_event_hub
  source:
    id: delete_event_hub
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 1156
  summary: "Deletes an Event Hub. This operation will also remove all associated state.\n\
    hub_name:\n   Name of the event hub to delete.\n\nfail_not_exist:\n   Specify\
    \ whether to throw an exception if the event hub doesn't exist."
  syntax:
    content: delete_event_hub(self, hub_name, fail_not_exist=False)
    parameters:
    - defaultValue: 'False'
      id: self
    - id: hub_name
    - id: fail_not_exist
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_event_hub
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_queue
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: delete_queue
  source:
    id: delete_queue
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 261
  summary: "Deletes an existing queue. This operation will also remove all associated\
    \ state including messages in the queue.\nqueue_name:\n   Name of the queue to\
    \ delete.\n\nfail_not_exist:\n   Specify whether to throw an exception if the\
    \ queue doesn't exist."
  syntax:
    content: delete_queue(self, queue_name, fail_not_exist=False)
    parameters:
    - defaultValue: 'False'
      id: self
    - id: queue_name
    - id: fail_not_exist
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_queue
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_queue_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: delete_queue_message
  source:
    id: delete_queue_message
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 1027
  summary: "Completes processing on a locked message and delete it from the queue.\
    \ This operation should only be called after processing a previously locked message\
    \ is successful to maintain At-Least-Once delivery assurances.\nqueue_name:\n\
    \   Name of the queue.\n\nsequence_number:\n   The sequence number of the message\
    \ to be deleted as returned in BrokerProperties['SequenceNumber'] by the Peek\
    \ Message operation.\n\nlock_token:\n   The ID of the lock as returned by the\
    \ Peek Message operation in BrokerProperties['LockToken']"
  syntax:
    content: delete_queue_message(self, queue_name, sequence_number, lock_token)
    parameters:
    - id: self
    - id: queue_name
    - id: sequence_number
    - id: lock_token
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_queue_message
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_rule
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: delete_rule
  source:
    id: delete_rule
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 452
  summary: "Deletes an existing rule.\ntopic_name:\n   Name of the topic.\n\nsubscription_name:\n\
    \   Name of the subscription.\n\nrule_name:\n   Name of the rule to delete.  DEFAULT_RULE_NAME=$Default.\
    \ Use DEFAULT_RULE_NAME to delete default rule for the subscription.\n\nfail_not_exist:\n\
    \   Specify whether throw exception when rule doesn't exist."
  syntax:
    content: delete_rule(self, topic_name, subscription_name, rule_name, fail_not_exist=False)
    parameters:
    - id: self
    - id: topic_name
    - defaultValue: 'False'
      id: subscription_name
    - id: rule_name
    - id: fail_not_exist
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_rule
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_subscription
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: delete_subscription
  source:
    id: delete_subscription
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 574
  summary: "Deletes an existing subscription.\ntopic_name:\n   Name of the topic.\n\
    \nsubscription_name:\n   Name of the subscription to delete.\n\nfail_not_exist:\n\
    \   Specify whether to throw an exception when the subscription doesn't exist."
  syntax:
    content: delete_subscription(self, topic_name, subscription_name, fail_not_exist=False)
    parameters:
    - id: self
    - defaultValue: 'False'
      id: topic_name
    - id: subscription_name
    - id: fail_not_exist
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_subscription
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_subscription_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: delete_subscription_message
  source:
    id: delete_subscription_message
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 833
  summary: "Completes processing on a locked message and delete it from the subscription.\
    \ This operation should only be called after processing a previously locked message\
    \ is successful to maintain At-Least-Once delivery assurances.\ntopic_name:\n\
    \   Name of the topic.\n\nsubscription_name:\n   Name of the subscription.\n\n\
    sequence_number:\n   The sequence number of the message to be deleted as returned\
    \ in BrokerProperties['SequenceNumber'] by the Peek Message operation.\n\nlock_token:\n\
    \   The ID of the lock as returned by the Peek Message operation in BrokerProperties['LockToken']"
  syntax:
    content: delete_subscription_message(self, topic_name, subscription_name, sequence_number,
      lock_token)
    parameters:
    - id: self
    - id: topic_name
    - id: subscription_name
    - id: sequence_number
    - id: lock_token
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_subscription_message
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_topic
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: delete_topic
  source:
    id: delete_topic
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 353
  summary: "Deletes an existing topic. This operation will also remove all associated\
    \ state including associated subscriptions.\ntopic_name:\n   Name of the topic\
    \ to delete.\n\nfail_not_exist:\n   Specify whether throw exception when topic\
    \ doesn't exist."
  syntax:
    content: delete_topic(self, topic_name, fail_not_exist=False)
    parameters:
    - defaultValue: 'False'
      id: self
    - id: topic_name
    - id: fail_not_exist
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_topic
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.format_dead_letter_queue_name
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: format_dead_letter_queue_name
  source:
    id: format_dead_letter_queue_name
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 157
  summary: Get the dead letter name of this queue
  syntax:
    content: format_dead_letter_queue_name(queue_name)
    parameters:
    - id: queue_name
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.format_dead_letter_queue_name
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.format_dead_letter_subscription_name
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: format_dead_letter_subscription_name
  source:
    id: format_dead_letter_subscription_name
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 162
  summary: Get the dead letter name of this subscription
  syntax:
    content: format_dead_letter_subscription_name(subscription_name)
    parameters:
    - id: subscription_name
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.format_dead_letter_subscription_name
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.get_event_hub
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: get_event_hub
  source:
    id: get_event_hub
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 1184
  summary: "Retrieves an existing event hub.\nhub_name:\n   Name of the event hub."
  syntax:
    content: get_event_hub(self, hub_name)
    parameters:
    - id: self
    - id: hub_name
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.get_event_hub
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.get_queue
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: get_queue
  source:
    id: get_queue
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 289
  summary: "Retrieves an existing queue.\nqueue_name:\n   Name of the queue."
  syntax:
    content: get_queue(self, queue_name)
    parameters:
    - id: self
    - id: queue_name
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.get_queue
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.get_rule
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: get_rule
  source:
    id: get_rule
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 489
  summary: "Retrieves the description for the specified rule.\ntopic_name:\n   Name\
    \ of the topic.\n\nsubscription_name:\n   Name of the subscription.\n\nrule_name:\n\
    \   Name of the rule."
  syntax:
    content: get_rule(self, topic_name, subscription_name, rule_name)
    parameters:
    - id: self
    - id: topic_name
    - id: subscription_name
    - id: rule_name
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.get_rule
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.get_subscription
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: get_subscription
  source:
    id: get_subscription
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 607
  summary: "Gets an existing subscription.\ntopic_name:\n   Name of the topic.\n\n\
    subscription_name:\n   Name of the subscription."
  syntax:
    content: get_subscription(self, topic_name, subscription_name)
    parameters:
    - id: self
    - id: topic_name
    - id: subscription_name
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.get_subscription
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.get_topic
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: get_topic
  source:
    id: get_topic
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 381
  summary: "Retrieves the description for the specified topic.\ntopic_name:\n   Name\
    \ of the topic."
  syntax:
    content: get_topic(self, topic_name)
    parameters:
    - id: self
    - id: topic_name
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.get_topic
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.list_queues
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: list_queues
  source:
    id: list_queues
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 307
  summary: Enumerates the queues in the service namespace.
  syntax:
    content: list_queues(self)
    parameters:
    - id: self
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.list_queues
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.list_rules
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: list_rules
  source:
    id: list_rules
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 515
  summary: "Retrieves the rules that exist under the specified subscription.\ntopic_name:\n\
    \   Name of the topic.\n\nsubscription_name:\n   Name of the subscription."
  syntax:
    content: list_rules(self, topic_name, subscription_name)
    parameters:
    - id: self
    - id: topic_name
    - id: subscription_name
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.list_rules
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.list_subscriptions
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: list_subscriptions
  source:
    id: list_subscriptions
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 629
  summary: "Retrieves the subscriptions in the specified topic.\ntopic_name:\n   Name\
    \ of the topic."
  syntax:
    content: list_subscriptions(self, topic_name)
    parameters:
    - id: self
    - id: topic_name
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.list_subscriptions
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.list_topics
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: list_topics
  source:
    id: list_topics
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 399
  summary: Retrieves the topics in the service namespace.
  syntax:
    content: list_topics(self)
    parameters:
    - id: self
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.list_topics
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.peek_lock_queue_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: peek_lock_queue_message
  source:
    id: peek_lock_queue_message
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 917
  summary: "Automically retrieves and locks a message from a queue for processing.\
    \ The message is guaranteed not to be delivered to other receivers (on the same\
    \ subscription only) during the lock duration period specified in the queue description.\
    \ Once the lock expires, the message will be available to other receivers. In\
    \ order to complete processing of the message, the receiver should issue a delete\
    \ command with the lock ID received from this operation. To abandon processing\
    \ of the message and unlock it for other receivers, an Unlock Message command\
    \ should be issued, or the lock duration period can expire.\nqueue_name:\n   Name\
    \ of the queue.\n\ntimeout:\n   Optional. The timeout parameter is expressed in\
    \ seconds."
  syntax:
    content: peek_lock_queue_message(self, queue_name, timeout="60")
    parameters:
    - defaultValue: '60'
      id: self
    - id: queue_name
    - id: timeout
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.peek_lock_queue_message
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.peek_lock_subscription_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: peek_lock_subscription_message
  source:
    id: peek_lock_subscription_message
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 698
  summary: "This operation is used to atomically retrieve and lock a message for processing.\
    \ The message is guaranteed not to be delivered to other receivers during the\
    \ lock duration period specified in buffer description. Once the lock expires,\
    \ the message will be available to other receivers (on the same subscription only)\
    \ during the lock duration period specified in the topic description. Once the\
    \ lock expires, the message will be available to other receivers. In order to\
    \ complete processing of the message, the receiver should issue a delete command\
    \ with the lock ID received from this operation. To abandon processing of the\
    \ message and unlock it for other receivers, an Unlock Message command should\
    \ be issued, or the lock duration period can expire.\ntopic_name:\n   Name of\
    \ the topic.\n\nsubscription_name:\n   Name of the subscription.\n\ntimeout:\n\
    \   Optional. The timeout parameter is expressed in seconds."
  syntax:
    content: peek_lock_subscription_message(self, topic_name, subscription_name, timeout="60")
    parameters:
    - id: self
    - defaultValue: '60'
      id: topic_name
    - id: subscription_name
    - id: timeout
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.peek_lock_subscription_message
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.read_delete_queue_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: read_delete_queue_message
  source:
    id: read_delete_queue_message
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 1003
  summary: "Reads and deletes a message from a queue as an atomic operation. This\
    \ operation should be used when a best-effort guarantee is sufficient for an application;\
    \ that is, using this operation it is possible for messages to be lost if processing\
    \ fails.\nqueue_name:\n   Name of the queue.\n\ntimeout:\n   Optional. The timeout\
    \ parameter is expressed in seconds."
  syntax:
    content: read_delete_queue_message(self, queue_name, timeout="60")
    parameters:
    - defaultValue: '60'
      id: self
    - id: queue_name
    - id: timeout
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.read_delete_queue_message
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.read_delete_subscription_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: read_delete_subscription_message
  source:
    id: read_delete_subscription_message
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 803
  summary: "Read and delete a message from a subscription as an atomic operation.\
    \ This operation should be used when a best-effort guarantee is sufficient for\
    \ an application; that is, using this operation it is possible for messages to\
    \ be lost if processing fails.\ntopic_name:\n   Name of the topic.\n\nsubscription_name:\n\
    \   Name of the subscription.\n\ntimeout:\n   Optional. The timeout parameter\
    \ is expressed in seconds."
  syntax:
    content: read_delete_subscription_message(self, topic_name, subscription_name,
      timeout="60")
    parameters:
    - id: self
    - defaultValue: '60'
      id: topic_name
    - id: subscription_name
    - id: timeout
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.read_delete_subscription_message
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.receive_queue_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: receive_queue_message
  source:
    id: receive_queue_message
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 1056
  summary: "Receive a message from a queue for processing.\nqueue_name:\n   Name of\
    \ the queue.\n\npeek_lock:\n   Optional. True to retrieve and lock the message.\
    \ False to read and delete the message. Default is True (lock).\n\ntimeout:\n\
    \   Optional. The timeout parameter is expressed in seconds."
  syntax:
    content: receive_queue_message(self, queue_name, peek_lock=True, timeout=60)
    parameters:
    - defaultValue: 'True'
      id: self
    - id: queue_name
    - id: peek_lock
    - defaultValue: '60'
      id: timeout
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.receive_queue_message
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.receive_subscription_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: receive_subscription_message
  source:
    id: receive_subscription_message
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 1073
  summary: "Receive a message from a subscription for processing.\ntopic_name:\n \
    \  Name of the topic.\n\nsubscription_name:\n   Name of the subscription.\n\n\
    peek_lock:\n   Optional. True to retrieve and lock the message. False to read\
    \ and delete the message. Default is True (lock).\n\ntimeout:\n   Optional. The\
    \ timeout parameter is expressed in seconds."
  syntax:
    content: receive_subscription_message(self, topic_name, subscription_name, peek_lock=True,
      timeout=60)
    parameters:
    - defaultValue: '60'
      id: self
    - defaultValue: 'True'
      id: topic_name
    - id: subscription_name
    - id: peek_lock
    - id: timeout
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.receive_subscription_message
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.renew_lock_queue_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: renew_lock_queue_message
  source:
    id: renew_lock_queue_message
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 975
  summary: "Renew lock on an already locked message on a given queue. A message must\
    \ have first been locked by a receiver before this operation is called.\nqueue_name:\n\
    \   Name of the queue.\n\nsequence_number:\n   The sequence number of the message\
    \ to be unlocked as returned in BrokerProperties['SequenceNumber'] by the Peek\
    \ Message operation.\n\nlock_token:\n   The ID of the lock as returned by the\
    \ Peek Message operation in BrokerProperties['LockToken']"
  syntax:
    content: renew_lock_queue_message(self, queue_name, sequence_number, lock_token)
    parameters:
    - id: self
    - id: queue_name
    - id: sequence_number
    - id: lock_token
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.renew_lock_queue_message
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.renew_lock_subscription_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: renew_lock_subscription_message
  source:
    id: renew_lock_subscription_message
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 770
  summary: "Renew the lock on an already locked message on a given subscription. A\
    \ message must have first been locked by a receiver before this operation is called.\n\
    topic_name:\n   Name of the topic.\n\nsubscription_name:\n   Name of the subscription.\n\
    \nsequence_number:\n   The sequence number of the message to be unlocked as returned\
    \ in BrokerProperties['SequenceNumber'] by the Peek Message operation.\n\nlock_token:\n\
    \   The ID of the lock as returned by the Peek Message operation in BrokerProperties['LockToken']"
  syntax:
    content: renew_lock_subscription_message(self, topic_name, subscription_name,
      sequence_number, lock_token)
    parameters:
    - id: self
    - id: topic_name
    - id: subscription_name
    - id: sequence_number
    - id: lock_token
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.renew_lock_subscription_message
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.send_event
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: send_event
  source:
    id: send_event
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 1202
  summary: Sends a new message event to an Event Hub.
  syntax:
    content: send_event(self, hub_name, message, device_id=None, broker_properties=None)
    parameters:
    - defaultValue: None
      id: self
    - defaultValue: None
      id: hub_name
    - id: message
    - id: device_id
    - id: broker_properties
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.send_event
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.send_queue_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: send_queue_message
  source:
    id: send_queue_message
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 867
  summary: "Sends a message into the specified queue. The limit to the number of messages\
    \ which may be present in the queue is governed by the message size the MaxTopicSizeInMegaBytes.\
    \ If this message will cause the queue to exceed its quota, a quota exceeded error\
    \ is returned and the message will be rejected.\nqueue_name:\n   Name of the queue.\n\
    \nmessage:\n   Message object containing message body and properties."
  syntax:
    content: send_queue_message(self, queue_name, message=None)
    parameters:
    - defaultValue: None
      id: self
    - id: queue_name
    - id: message
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.send_queue_message
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.send_queue_message_batch
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: send_queue_message_batch
  source:
    id: send_queue_message_batch
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 892
  summary: "Sends a batch of messages into the specified queue. The limit to the number\
    \ of messages which may be present in the topic is governed by the message size\
    \ the MaxTopicSizeInMegaBytes. If this message will cause the queue to exceed\
    \ its quota, a quota exceeded error is returned and the message will be rejected.\n\
    queue_name:\n   Name of the queue.\n\nmessages:\n   List of message objects containing\
    \ message body and properties."
  syntax:
    content: send_queue_message_batch(self, queue_name, messages=None)
    parameters:
    - defaultValue: None
      id: self
    - id: queue_name
    - id: messages
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.send_queue_message_batch
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.send_topic_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: send_topic_message
  source:
    id: send_topic_message
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 648
  summary: "Enqueues a message into the specified topic. The limit to the number of\
    \ messages which may be present in the topic is governed by the message size in\
    \ MaxTopicSizeInBytes. If this message causes the topic to exceed its quota, a\
    \ quota exceeded error is returned and the message will be rejected.\ntopic_name:\n\
    \   Name of the topic.\n\nmessage:\n   Message object containing message body\
    \ and properties."
  syntax:
    content: send_topic_message(self, topic_name, message=None)
    parameters:
    - defaultValue: None
      id: self
    - id: topic_name
    - id: message
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.send_topic_message
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.send_topic_message_batch
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: send_topic_message_batch
  source:
    id: send_topic_message_batch
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 673
  summary: "Sends a batch of messages into the specified topic. The limit to the number\
    \ of messages which may be present in the topic is governed by the message size\
    \ the MaxTopicSizeInMegaBytes. If this message will cause the topic to exceed\
    \ its quota, a quota exceeded error is returned and the message will be rejected.\n\
    topic_name:\n   Name of the topic.\n\nmessages:\n   List of message objects containing\
    \ message body and properties."
  syntax:
    content: send_topic_message_batch(self, topic_name, messages=None)
    parameters:
    - defaultValue: None
      id: self
    - id: topic_name
    - id: messages
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.send_topic_message_batch
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.set_proxy
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: set_proxy
  source:
    id: set_proxy
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 207
  summary: "Sets the proxy server host and port for the HTTP CONNECT Tunnelling.\n\
    host:\n   Address of the proxy. Ex: '192.168.0.100'\n\nport:\n   Port of the proxy.\
    \ Ex: 6000\n\nuser:\n   User for proxy authorization.\n\npassword:\n   Password\
    \ for proxy authorization."
  syntax:
    content: set_proxy(self, host, port, user=None, password=None)
    parameters:
    - defaultValue: None
      id: self
    - defaultValue: None
      id: host
    - id: port
    - id: user
    - id: password
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.set_proxy
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.unlock_queue_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: unlock_queue_message
  source:
    id: unlock_queue_message
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 946
  summary: "Unlocks a message for processing by other receivers on a given queue.\
    \ This operation deletes the lock object, causing the message to be unlocked.\
    \ A message must have first been locked by a receiver before this operation is\
    \ called.\nqueue_name:\n   Name of the queue.\n\nsequence_number:\n   The sequence\
    \ number of the message to be unlocked as returned in BrokerProperties['SequenceNumber']\
    \ by the Peek Message operation.\n\nlock_token:\n   The ID of the lock as returned\
    \ by the Peek Message operation in BrokerProperties['LockToken']"
  syntax:
    content: unlock_queue_message(self, queue_name, sequence_number, lock_token)
    parameters:
    - id: self
    - id: queue_name
    - id: sequence_number
    - id: lock_token
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.unlock_queue_message
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.unlock_subscription_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: unlock_subscription_message
  source:
    id: unlock_subscription_message
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 736
  summary: "Unlock a message for processing by other receivers on a given subscription.\
    \ This operation deletes the lock object, causing the message to be unlocked.\
    \ A message must have first been locked by a receiver before this operation is\
    \ called.\ntopic_name:\n   Name of the topic.\n\nsubscription_name:\n   Name of\
    \ the subscription.\n\nsequence_number:\n   The sequence number of the message\
    \ to be unlocked as returned in BrokerProperties['SequenceNumber'] by the Peek\
    \ Message operation.\n\nlock_token:\n   The ID of the lock as returned by the\
    \ Peek Message operation in BrokerProperties['LockToken']"
  syntax:
    content: unlock_subscription_message(self, topic_name, subscription_name, sequence_number,
      lock_token)
    parameters:
    - id: self
    - id: topic_name
    - id: subscription_name
    - id: sequence_number
    - id: lock_token
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.unlock_subscription_message
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.update_event_hub
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: update_event_hub
  source:
    id: update_event_hub
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 1132
  summary: "Updates an Event Hub.\nhub_name:\n   Name of event hub.\n\nhub:\n   Optional.\
    \ Event hub properties. Instance of EventHub class.\n\nhub.message_retention_in_days:\n\
    \   Number of days to retain the events for this Event Hub."
  syntax:
    content: update_event_hub(self, hub_name, hub=None)
    parameters:
    - defaultValue: None
      id: self
    - id: hub_name
    - id: hub
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.update_event_hub
- _type: method
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.with_filter
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: with_filter
  source:
    id: with_filter
    path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: \azure_servicebus-0.21.1-py3.5.egg\azure\servicebus\servicebusservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 186
  summary: Returns a new service which will process requests with the specified filter.  Filtering
    operations can include logging, automatic retrying, etc...  The filter is a lambda
    which receives the HTTPRequest and another lambda.  The filter can perform any
    pre-processing on the request, pass it off to the next lambda, and then perform
    any post-processing on the response.
  syntax:
    content: with_filter(self, filter)
    parameters:
    - id: self
    - id: filter
  type: Method
  uid: azure.servicebus.servicebusservice.ServiceBusService.with_filter
references:
- fullName: azure.servicebus.servicebusservice.ServiceBusService.create_event_hub
  isExternal: false
  name: create_event_hub
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.create_event_hub
- fullName: azure.servicebus.servicebusservice.ServiceBusService.create_queue
  isExternal: false
  name: create_queue
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.create_queue
- fullName: azure.servicebus.servicebusservice.ServiceBusService.create_rule
  isExternal: false
  name: create_rule
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.create_rule
- fullName: azure.servicebus.servicebusservice.ServiceBusService.create_subscription
  isExternal: false
  name: create_subscription
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.create_subscription
- fullName: azure.servicebus.servicebusservice.ServiceBusService.create_topic
  isExternal: false
  name: create_topic
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.create_topic
- fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_event_hub
  isExternal: false
  name: delete_event_hub
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_event_hub
- fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_queue
  isExternal: false
  name: delete_queue
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_queue
- fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_queue_message
  isExternal: false
  name: delete_queue_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_queue_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_rule
  isExternal: false
  name: delete_rule
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_rule
- fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_subscription
  isExternal: false
  name: delete_subscription
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_subscription
- fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_subscription_message
  isExternal: false
  name: delete_subscription_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_subscription_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_topic
  isExternal: false
  name: delete_topic
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_topic
- fullName: azure.servicebus.servicebusservice.ServiceBusService.format_dead_letter_queue_name
  isExternal: false
  name: format_dead_letter_queue_name
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.format_dead_letter_queue_name
- fullName: azure.servicebus.servicebusservice.ServiceBusService.format_dead_letter_subscription_name
  isExternal: false
  name: format_dead_letter_subscription_name
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.format_dead_letter_subscription_name
- fullName: azure.servicebus.servicebusservice.ServiceBusService.get_event_hub
  isExternal: false
  name: get_event_hub
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.get_event_hub
- fullName: azure.servicebus.servicebusservice.ServiceBusService.get_queue
  isExternal: false
  name: get_queue
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.get_queue
- fullName: azure.servicebus.servicebusservice.ServiceBusService.get_rule
  isExternal: false
  name: get_rule
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.get_rule
- fullName: azure.servicebus.servicebusservice.ServiceBusService.get_subscription
  isExternal: false
  name: get_subscription
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.get_subscription
- fullName: azure.servicebus.servicebusservice.ServiceBusService.get_topic
  isExternal: false
  name: get_topic
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.get_topic
- fullName: azure.servicebus.servicebusservice.ServiceBusService.list_queues
  isExternal: false
  name: list_queues
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.list_queues
- fullName: azure.servicebus.servicebusservice.ServiceBusService.list_rules
  isExternal: false
  name: list_rules
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.list_rules
- fullName: azure.servicebus.servicebusservice.ServiceBusService.list_subscriptions
  isExternal: false
  name: list_subscriptions
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.list_subscriptions
- fullName: azure.servicebus.servicebusservice.ServiceBusService.list_topics
  isExternal: false
  name: list_topics
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.list_topics
- fullName: azure.servicebus.servicebusservice.ServiceBusService.peek_lock_queue_message
  isExternal: false
  name: peek_lock_queue_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.peek_lock_queue_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.peek_lock_subscription_message
  isExternal: false
  name: peek_lock_subscription_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.peek_lock_subscription_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.read_delete_queue_message
  isExternal: false
  name: read_delete_queue_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.read_delete_queue_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.read_delete_subscription_message
  isExternal: false
  name: read_delete_subscription_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.read_delete_subscription_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.receive_queue_message
  isExternal: false
  name: receive_queue_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.receive_queue_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.receive_subscription_message
  isExternal: false
  name: receive_subscription_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.receive_subscription_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.renew_lock_queue_message
  isExternal: false
  name: renew_lock_queue_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.renew_lock_queue_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.renew_lock_subscription_message
  isExternal: false
  name: renew_lock_subscription_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.renew_lock_subscription_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.send_event
  isExternal: false
  name: send_event
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.send_event
- fullName: azure.servicebus.servicebusservice.ServiceBusService.send_queue_message
  isExternal: false
  name: send_queue_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.send_queue_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.send_queue_message_batch
  isExternal: false
  name: send_queue_message_batch
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.send_queue_message_batch
- fullName: azure.servicebus.servicebusservice.ServiceBusService.send_topic_message
  isExternal: false
  name: send_topic_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.send_topic_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.send_topic_message_batch
  isExternal: false
  name: send_topic_message_batch
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.send_topic_message_batch
- fullName: azure.servicebus.servicebusservice.ServiceBusService.set_proxy
  isExternal: false
  name: set_proxy
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.set_proxy
- fullName: azure.servicebus.servicebusservice.ServiceBusService.unlock_queue_message
  isExternal: false
  name: unlock_queue_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.unlock_queue_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.unlock_subscription_message
  isExternal: false
  name: unlock_subscription_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.unlock_subscription_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.update_event_hub
  isExternal: false
  name: update_event_hub
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.update_event_hub
- fullName: azure.servicebus.servicebusservice.ServiceBusService.with_filter
  isExternal: false
  name: with_filter
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.with_filter
