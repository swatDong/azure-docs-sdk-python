#YamlMime:PythonReference
api_name: []
items:
- _type: class
  children:
  - azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.create_database
  - azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.create_firewall_rule
  - azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.create_server
  - azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.delete_database
  - azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.delete_firewall_rule
  - azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.delete_server
  - azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.get_server_event_logs
  - azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_databases
  - azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_firewall_rules
  - azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_quotas
  - azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_servers
  - azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_service_level_objectives
  - azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.set_server_admin_password
  - azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.update_database
  - azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.update_firewall_rule
  class: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.servicemanagement.servicemanagementclient._ServiceManagementClient
  langs:
  - python
  module: azure.servicemanagement.sqldatabasemanagementservice
  name: SqlDatabaseManagementService
  source:
    id: SqlDatabaseManagementService
    path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
    remote:
      branch: master
      path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 38
  summary: 'Bases: `azure.servicemanagement.servicemanagementclient._ServiceManagementClient`

    Note that this class is a preliminary work on SQL Database management. Since it
    lack a lot a features, final version can be slightly different from the current
    one.















    '
  syntax:
    content: SqlDatabaseManagementService(self, subscription_id=None, cert_file=None,
      host="management.core.windows.net", request_session=None, timeout=65)
  type: Class
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
- _type: method
  class: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.create_database
  langs:
  - python
  module: azure.servicemanagement.sqldatabasemanagementservice
  name: create_database
  source:
    id: create_database
    path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
    remote:
      branch: master
      path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 289
  summary: "Creates a new Azure SQL Database.\nserver_name:\n   Name of the server\
    \ to contain the new database.\n\nname:\n   Required. The name for the new database.\
    \ See Naming Requirements in Azure SQL Database General Guidelines and Limitations\
    \ and Database Identifiers for more information.\n\nservice_objective_id:\n  \
    \ Required. The GUID corresponding to the performance level for Edition. See List\
    \ Service Level Objectives for current values.\n\nedition:\n   Optional. The Service\
    \ Tier (Edition) for the new database. If omitted, the default is Web. Valid values\
    \ are Web, Business, Basic, Standard, and Premium. See Azure SQL Database Service\
    \ Tiers (Editions) and Web and Business Edition Sunset FAQ for more information.\n\
    \ncollation_name:\n   Optional. The database collation. This can be any collation\
    \ supported by SQL. If omitted, the default collation is used. See SQL Server\
    \ Collation Support in Azure SQL Database General Guidelines and Limitations for\
    \ more information.\n\nmax_size_bytes:\n   Optional. Sets the maximum size, in\
    \ bytes, for the database. This value must be within the range of allowed values\
    \ for Edition. If omitted, the default value for the edition is used. See Azure\
    \ SQL Database Service Tiers (Editions) for current maximum databases sizes. Convert\
    \ MB or GB values to bytes. 1 MB = 1048576 bytes. 1 GB = 1073741824 bytes."
  syntax:
    content: create_database(self, server_name, name, service_objective_id, edition=None,
      collation_name=None, max_size_bytes=None)
    parameters:
    - defaultValue: None
      id: self
    - defaultValue: None
      id: server_name
    - defaultValue: None
      id: name
    - id: service_objective_id
    - id: edition
    - id: collation_name
    - id: max_size_bytes
  type: Method
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.create_database
- _type: method
  class: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.create_firewall_rule
  langs:
  - python
  module: azure.servicemanagement.sqldatabasemanagementservice
  name: create_firewall_rule
  source:
    id: create_firewall_rule
    path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
    remote:
      branch: master
      path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 188
  summary: "Creates an Azure SQL Database server firewall rule.\nserver_name:\n  \
    \ Name of the server to set the firewall rule on.\n\nname:\n   The name of the\
    \ new firewall rule.\n\nstart_ip_address:\n   The lowest IP address in the range\
    \ of the server-level firewall setting. IP addresses equal to or greater than\
    \ this can attempt to connect to the server. The lowest possible IP address is\
    \ 0.0.0.0.\n\nend_ip_address:\n   The highest IP address in the range of the server-level\
    \ firewall setting. IP addresses equal to or less than this can attempt to connect\
    \ to the server. The highest possible IP address is 255.255.255.255."
  syntax:
    content: create_firewall_rule(self, server_name, name, start_ip_address, end_ip_address)
    parameters:
    - id: self
    - id: server_name
    - id: name
    - id: start_ip_address
    - id: end_ip_address
  type: Method
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.create_firewall_rule
- _type: method
  class: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.create_server
  langs:
  - python
  module: azure.servicemanagement.sqldatabasemanagementservice
  name: create_server
  source:
    id: create_server
    path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
    remote:
      branch: master
      path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 77
  summary: "Create a new Azure SQL Database server.\nadmin_login:\n   The administrator\
    \ login name for the new server.\n\nadmin_password:\n   The administrator login\
    \ password for the new server.\n\nlocation:\n   The region to deploy the new server."
  syntax:
    content: create_server(self, admin_login, admin_password, location)
    parameters:
    - id: self
    - id: admin_login
    - id: admin_password
    - id: location
  type: Method
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.create_server
- _type: method
  class: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.delete_database
  langs:
  - python
  module: azure.servicemanagement.sqldatabasemanagementservice
  name: delete_database
  source:
    id: delete_database
    path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
    remote:
      branch: master
      path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 370
  summary: "Deletes an Azure SQL Database.\nserver_name:\n   Name of the server where\
    \ the database is located.\n\nname:\n   Name of the database to delete."
  syntax:
    content: delete_database(self, server_name, name)
    parameters:
    - id: self
    - id: server_name
    - id: name
  type: Method
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.delete_database
- _type: method
  class: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.delete_firewall_rule
  langs:
  - python
  module: azure.servicemanagement.sqldatabasemanagementservice
  name: delete_firewall_rule
  source:
    id: delete_firewall_rule
    path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
    remote:
      branch: master
      path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 248
  summary: "Deletes an Azure SQL Database server firewall rule.\nserver_name:\n  \
    \ Name of the server with the firewall rule you want to delete.\n\nname:\n   Name\
    \ of the firewall rule you want to delete."
  syntax:
    content: delete_firewall_rule(self, server_name, name)
    parameters:
    - id: self
    - id: server_name
    - id: name
  type: Method
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.delete_firewall_rule
- _type: method
  class: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.delete_server
  langs:
  - python
  module: azure.servicemanagement.sqldatabasemanagementservice
  name: delete_server
  source:
    id: delete_server
    path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
    remote:
      branch: master
      path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 121
  summary: "Deletes an Azure SQL Database server (including all its databases).\n\
    server_name:\n   Name of the server you want to delete."
  syntax:
    content: delete_server(self, server_name)
    parameters:
    - id: self
    - id: server_name
  type: Method
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.delete_server
- _type: method
  class: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.get_server_event_logs
  langs:
  - python
  module: azure.servicemanagement.sqldatabasemanagementservice
  name: get_server_event_logs
  source:
    id: get_server_event_logs
    path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
    remote:
      branch: master
      path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 152
  summary: "Gets the event logs for an Azure SQL Database Server.\nserver_name:\n\
    \   Name of the server to retrieve the event logs from.\n\nstart_date:\n   The\
    \ starting date and time of the events to retrieve in UTC format, for example\
    \ '2011-09-28 16:05:00'.\n\ninterval_size_in_minutes:\n   Size of the event logs\
    \ to retrieve (in minutes). Valid values are: 5, 60, or 1440.\n\nevent_types:\n\
    \   The event type of the log entries you want to retrieve. Valid values are:\n\
    \n   <SYSTEM MESSAGE: c:\\python35\\lib\\site-packages\\azure_servicemanagement_legacy-0.20.6-py3.5.egg\\\
    azure\\servicemanagement\\sqldatabasemanagementservice.py:docstring of azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.get_server_event_logs:14:\
    \ (ERROR/3) Unexpected indentation.>\n\n      * connection_successful\n\n    \
    \  * connection_failed\n\n      * connection_terminated\n\n      * deadlock\n\n\
    \      * throttling\n\n      * throttling_long_transaction\n\n   <SYSTEM MESSAGE:\
    \ c:\\python35\\lib\\site-packages\\azure_servicemanagement_legacy-0.20.6-py3.5.egg\\\
    azure\\servicemanagement\\sqldatabasemanagementservice.py:docstring of azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.get_server_event_logs:20:\
    \ (WARNING/2) Block quote ends without a blank line; unexpected unindent.>\n\n\
    \   To return all event types pass in an empty string."
  syntax:
    content: get_server_event_logs(self, server_name, start_date, interval_size_in_minutes,
      event_types="")
    parameters:
    - id: self
    - id: server_name
    - defaultValue: ''
      id: start_date
    - id: interval_size_in_minutes
    - id: event_types
  type: Method
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.get_server_event_logs
- _type: method
  class: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_databases
  langs:
  - python
  module: azure.servicemanagement.sqldatabasemanagementservice
  name: list_databases
  source:
    id: list_databases
    path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
    remote:
      branch: master
      path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 381
  summary: List the SQL databases defined on the specified server name
  syntax:
    content: list_databases(self, name)
    parameters:
    - id: self
    - id: name
  type: Method
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_databases
- _type: method
  class: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_firewall_rules
  langs:
  - python
  module: azure.servicemanagement.sqldatabasemanagementservice
  name: list_firewall_rules
  source:
    id: list_firewall_rules
    path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
    remote:
      branch: master
      path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 262
  summary: "Retrieves the set of firewall rules for an Azure SQL Database Server.\n\
    server_name:\n   Name of the server."
  syntax:
    content: list_firewall_rules(self, server_name)
    parameters:
    - id: self
    - id: server_name
  type: Method
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_firewall_rules
- _type: method
  class: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_quotas
  langs:
  - python
  module: azure.servicemanagement.sqldatabasemanagementservice
  name: list_quotas
  source:
    id: list_quotas
    path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
    remote:
      branch: master
      path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 139
  summary: "Gets quotas for an Azure SQL Database Server.\nserver_name:\n   Name of\
    \ the server."
  syntax:
    content: list_quotas(self, server_name)
    parameters:
    - id: self
    - id: server_name
  type: Method
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_quotas
- _type: method
  class: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_servers
  langs:
  - python
  module: azure.servicemanagement.sqldatabasemanagementservice
  name: list_servers
  source:
    id: list_servers
    path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
    remote:
      branch: master
      path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 132
  summary: List the SQL servers defined on the account.
  syntax:
    content: list_servers(self)
    parameters:
    - id: self
  type: Method
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_servers
- _type: method
  class: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_service_level_objectives
  langs:
  - python
  module: azure.servicemanagement.sqldatabasemanagementservice
  name: list_service_level_objectives
  source:
    id: list_service_level_objectives
    path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
    remote:
      branch: master
      path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 275
  summary: "Gets the service level objectives for an Azure SQL Database server.\n\
    server_name:\n   Name of the server."
  syntax:
    content: list_service_level_objectives(self, server_name)
    parameters:
    - id: self
    - id: server_name
  type: Method
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_service_level_objectives
- _type: method
  class: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.set_server_admin_password
  langs:
  - python
  module: azure.servicemanagement.sqldatabasemanagementservice
  name: set_server_admin_password
  source:
    id: set_server_admin_password
    path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
    remote:
      branch: master
      path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 103
  summary: "Reset the administrator password for a server.\nserver_name:\n   Name\
    \ of the server to change the password.\n\nadmin_password:\n   The new administrator\
    \ password for the server."
  syntax:
    content: set_server_admin_password(self, server_name, admin_password)
    parameters:
    - id: self
    - id: server_name
    - id: admin_password
  type: Method
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.set_server_admin_password
- _type: method
  class: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.update_database
  langs:
  - python
  module: azure.servicemanagement.sqldatabasemanagementservice
  name: update_database
  source:
    id: update_database
    path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
    remote:
      branch: master
      path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 334
  summary: "Updates existing database details.\nserver_name:\n   Name of the server\
    \ to contain the new database.\n\nname:\n   Required. The name for the new database.\
    \ See Naming Requirements in Azure SQL Database General Guidelines and Limitations\
    \ and Database Identifiers for more information.\n\nnew_database_name:\n   Optional.\
    \ The new name for the new database.\n\nservice_objective_id:\n   Optional. The\
    \ new service level to apply to the database. For more information about service\
    \ levels, see Azure SQL Database Service Tiers and Performance Levels. Use List\
    \ Service Level Objectives to get the correct ID for the desired service objective.\n\
    \nedition:\n   Optional. The new edition for the new database.\n\nmax_size_bytes:\n\
    \   Optional. The new size of the database in bytes. For information on available\
    \ sizes for each edition, see Azure SQL Database Service Tiers (Editions)."
  syntax:
    content: update_database(self, server_name, name, new_database_name=None, service_objective_id=None,
      edition=None, max_size_bytes=None)
    parameters:
    - defaultValue: None
      id: self
    - defaultValue: None
      id: server_name
    - id: name
    - id: new_database_name
    - id: service_objective_id
    - defaultValue: None
      id: edition
    - defaultValue: None
      id: max_size_bytes
  type: Method
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.update_database
- _type: method
  class: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.update_firewall_rule
  langs:
  - python
  module: azure.servicemanagement.sqldatabasemanagementservice
  name: update_firewall_rule
  source:
    id: update_firewall_rule
    path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
    remote:
      branch: master
      path: \azure_servicemanagement_legacy-0.20.6-py3.5.egg\azure\servicemanagement\sqldatabasemanagementservice.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 218
  summary: "Update a firewall rule for an Azure SQL Database server.\nserver_name:\n\
    \   Name of the server to set the firewall rule on.\n\nname:\n   The name of the\
    \ firewall rule to update.\n\nstart_ip_address:\n   The lowest IP address in the\
    \ range of the server-level firewall setting. IP addresses equal to or greater\
    \ than this can attempt to connect to the server. The lowest possible IP address\
    \ is 0.0.0.0.\n\nend_ip_address:\n   The highest IP address in the range of the\
    \ server-level firewall setting. IP addresses equal to or less than this can attempt\
    \ to connect to the server. The highest possible IP address is 255.255.255.255."
  syntax:
    content: update_firewall_rule(self, server_name, name, start_ip_address, end_ip_address)
    parameters:
    - id: self
    - id: server_name
    - id: name
    - id: start_ip_address
    - id: end_ip_address
  type: Method
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.update_firewall_rule
references:
- fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.create_database
  isExternal: false
  name: create_database
  parent: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.create_database
- fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.create_firewall_rule
  isExternal: false
  name: create_firewall_rule
  parent: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.create_firewall_rule
- fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.create_server
  isExternal: false
  name: create_server
  parent: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.create_server
- fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.delete_database
  isExternal: false
  name: delete_database
  parent: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.delete_database
- fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.delete_firewall_rule
  isExternal: false
  name: delete_firewall_rule
  parent: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.delete_firewall_rule
- fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.delete_server
  isExternal: false
  name: delete_server
  parent: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.delete_server
- fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.get_server_event_logs
  isExternal: false
  name: get_server_event_logs
  parent: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.get_server_event_logs
- fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_databases
  isExternal: false
  name: list_databases
  parent: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_databases
- fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_firewall_rules
  isExternal: false
  name: list_firewall_rules
  parent: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_firewall_rules
- fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_quotas
  isExternal: false
  name: list_quotas
  parent: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_quotas
- fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_servers
  isExternal: false
  name: list_servers
  parent: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_servers
- fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_service_level_objectives
  isExternal: false
  name: list_service_level_objectives
  parent: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.list_service_level_objectives
- fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.set_server_admin_password
  isExternal: false
  name: set_server_admin_password
  parent: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.set_server_admin_password
- fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.update_database
  isExternal: false
  name: update_database
  parent: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.update_database
- fullName: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.update_firewall_rule
  isExternal: false
  name: update_firewall_rule
  parent: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService
  uid: azure.servicemanagement.sqldatabasemanagementservice.SqlDatabaseManagementService.update_firewall_rule
