#YamlMime:PythonReference
api_name: []
items:
- _type: class
  children: []
  class: azure.batch.models.StartTask
  fullName: azure.batch.models.StartTask
  inheritance:
  - inheritance:
    - type: builtins.object
    type: msrest.serialization.Model
  langs:
  - python
  module: azure.batch.models
  name: StartTask
  source:
    id: StartTask
    path: \azure_batch-3.0.0-py3.5.egg\azure\batch\models\start_task.py
    remote:
      branch: master
      path: \azure_batch-3.0.0-py3.5.egg\azure\batch\models\start_task.py
      repo: https://github.com/swatDong/azure-sdk-for-python
    startLine: 15
  summary: 'Bases: `msrest.serialization.Model`

    A task which is run when a compute node joins a pool in the Azure Batch service,
    or when the compute node is rebooted or reimaged.'
  syntax:
    content: StartTask(self, command_line, resource_files=None, environment_settings=None,
      user_identity=None, max_task_retry_count=None, wait_for_success=None)
    parameters:
    - description: The command line of the start task. The command line does not run
        under a shell, and therefore cannot take advantage of shell features such
        as environment variable expansion. If you want to take advantage of such features,
        you should invoke the shell in the command line, for example using "cmd /c
        MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
      id: command_line
      type:
      - str
    - description: A list of files that the Batch service will download to the compute
        node before running the command line.
      id: resource_files
      type:
      - list of ResourceFile
    - description: A list of environment variable settings for the start task.
      id: environment_settings
      type:
      - list of EnvironmentSetting
    - description: The user identity under which the start task runs. If omitted,
        the task runs as a non-administrative user unique to the task.
      id: user_identity
      type:
      - UserIdentity
    - description: The maximum number of times the task may be retried. The Batch
        service retries a task if its exit code is nonzero. Note that this value specifically
        controls the number of retries. The Batch service will try the task once,
        and may then retry up to this limit. For example, if the maximum retry count
        is 3, Batch tries the task up to 4 times (one initial try and 3 retries).
        If the maximum retry count is 0, the Batch service does not retry the task.
        If the maximum retry count is -1, the Batch service retries the task without
        limit.
      id: max_task_retry_count
      type:
      - int
    - description: Whether the Batch service should wait for the start task to complete
        successfully (that is, to exit with exit code 0) before scheduling any tasks
        on the compute node. If true and the start task fails on a compute node, the
        Batch service retries the start task up to its maximum retry count (maxTaskRetryCount).
        If the task has still not completed successfully after all retries, then the
        Batch service marks the compute node unusable, and will not schedule tasks
        to it. This condition can be detected via the node state and scheduling error
        detail. If false, the Batch service will not wait for the start task to complete.
        In this case, other tasks can start executing on the compute node while the
        start task is still running; and even if the start task fails, new tasks will
        continue to be scheduled on the node. The default is false.
      id: wait_for_success
      type:
      - bool
  type: Class
  uid: azure.batch.models.StartTask
references: []
